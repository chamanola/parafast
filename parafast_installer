#!/bin/bash

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

echo -e "${YELLOW}         ===========================================${NC}"
echo -e "${CYAN}                 PARAFAST INSTALLATION TOOL${NC}"
echo -e "${YELLOW}         ===========================================${NC}"
echo ""

error_exit() {
    echo -e "${RED}[✗] ERROR: $1${NC}" >&2
    exit 1
}

if ! command -v curl &> /dev/null; then
    error_exit "curl is required but not installed.\nInstall using:\n  ${YELLOW}Termux: pkg install curl\n  Linux: sudo apt install curl${NC}"
fi

if ! command -v go &> /dev/null || ! go version &> /dev/null; then
    echo -e "${YELLOW}   ⚙️ Golang not found, installing...${NC}"
    if command -v pkg &> /dev/null; then
        pkg install golang -y || error_exit "Failed to install Golang"
        # Setup for Termux
        mkdir -p "$HOME/go/bin"
        echo 'export PATH=$PATH:$HOME/go/bin' >> "$HOME/.bashrc"
        source "$HOME/.bashrc"
    elif command -v apt-get &> /dev/null; then
        sudo apt-get install golang -y || error_exit "Failed to install Golang"
    else
        error_exit "Cannot determine package manager to install Golang"
    fi
    
    if ! command -v go &> /dev/null; then
        error_exit "Golang installation failed! Try manual install first"
    fi
    echo -e "${GREEN}   ✓ Golang installed successfully${NC}"
else
    echo -e "${GREEN}   ✓ Golang is already installed${NC}"
fi

ARCH=$(uname -m)
echo -e "${CYAN}  🔍 Detected architecture : ${YELLOW}$ARCH${NC}"

URL32="https://github.com/chamanola/parafast/raw/main/android%2032%20bit/parafast"
URL64="https://github.com/chamanola/parafast/raw/main/android%2Blinux%2064bit/parafast"

case "$ARCH" in
    armv7l|armv6l|armv8l|armv7|armv6|arm|armeabi|armeabi-v7a|i686|x86|x86_32)
        echo -e "${GREEN}  📥 Downloading 32-bit version...${NC}"
        DOWNLOAD_URL=$URL32
        ;;
    aarch64|arm64|armv8b|armv8a|x86_64|amd64)
        echo -e "${GREEN}  📥 Downloading 64-bit version...${NC}"
        DOWNLOAD_URL=$URL64
        ;;
    *)
        if [[ "$ARCH" == arm* ]]; then
            echo -e "${GREEN}  📥 Downloading 32-bit version...${NC}"
            DOWNLOAD_URL=$URL32
        elif [[ "$ARCH" == aarch64* || "$ARCH" == arm64* ]]; then
            echo -e "${GREEN}  📥 Downloading 64-bit version...${NC}"
            DOWNLOAD_URL=$URL64
        else
            error_exit "Unsupported architecture: $ARCH"
        fi
        ;;
esac

HOME_DIR="${HOME:-~}"

echo -e "${YELLOW}  💦 Cleaning previous installations...${NC}"
rm -f "$HOME_DIR/go/bin/parafast" "$HOME_DIR/go/bin/parafast_main" 2>/dev/null || true
mkdir -p "$HOME_DIR/go/bin" || error_exit "Failed to create $HOME_DIR/go/bin directory"

echo -e "${CYAN}  ⚡ Downloading parafast...${NC}"
if ! curl -L "$DOWNLOAD_URL" -o "$HOME_DIR/go/bin/parafast"; then
    error_exit "Download failed! Check your internet connection"
fi

chmod +x "$HOME_DIR/go/bin/parafast" || error_exit "Failed to make parafast executable"

ADDED_PATH=0
if [[ -f "$HOME_DIR/.bashrc" ]] && ! grep -q 'export PATH=$PATH:$HOME/go/bin' "$HOME_DIR/.bashrc"; then
    echo 'export PATH=$PATH:$HOME/go/bin' >> "$HOME_DIR/.bashrc"
    echo -e "${GREEN}  ✓ Added to PATH in ~/.bashrc${NC}"
    ADDED_PATH=1
fi
if [[ -f "$HOME_DIR/.zshrc" ]] && ! grep -q 'export PATH=$PATH:$HOME/go/bin' "$HOME_DIR/.zshrc"; then
    echo 'export PATH=$PATH:$HOME/go/bin' >> "$HOME_DIR/.zshrc"
    echo -e "${GREEN}  ✓ Added to PATH in ~/.zshrc${NC}"
    ADDED_PATH=1
fi

if [ $ADDED_PATH -eq 1 ]; then
    if [ -n "$BASH" ]; then
        source "$HOME_DIR/.bashrc" 2>/dev/null || true
    elif [ -n "$ZSH_NAME" ]; then
        source "$HOME_DIR/.zshrc" 2>/dev/null || true
    fi
fi

export PATH="$PATH:$HOME_DIR/go/bin"

echo -e "${GREEN}"
echo "         ╔══════════════════════════════════════════╗"
echo "                    INSTALLATION COMPLETE!         "
echo "         ╚══════════════════════════════════════════╝"
echo -e "${NC}"

echo -e "${CYAN}   ♥️ Thank you for installing Parafast!${NC}"
echo ""
echo -e "${YELLOW}   🚀 LAUNCHING PARAFAST... ⚡${NC}"
echo ""

sleep 3

exit 0